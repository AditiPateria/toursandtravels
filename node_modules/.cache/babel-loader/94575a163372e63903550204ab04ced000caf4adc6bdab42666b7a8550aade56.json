{"ast":null,"code":"import api from './api';\nexport const login = async credentials => {\n  try {\n    const cleanedCredentials = {\n      ...credentials,\n      username: credentials.username.trim()\n    };\n    console.log('Attempting login with credentials:', {\n      username: cleanedCredentials.username\n    });\n    const response = await api.post('/api/auth/login', cleanedCredentials);\n    const {\n      token,\n      id,\n      username,\n      email,\n      roles = []\n    } = response.data;\n    if (!token) {\n      throw new Error('No authentication token received');\n    }\n    localStorage.setItem('token', token); // ✅ Store raw token only\n\n    return {\n      token,\n      id,\n      username,\n      email,\n      roles\n    };\n  } catch (error) {\n    var _error$response, _error$response2, _error$response3, _error$response3$data;\n    console.error('Login error details:', {\n      error,\n      response: error.response,\n      data: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data,\n      status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status\n    });\n    if (!error.response) {\n      throw new Error('Unable to connect to the server. Please check if the backend is running.');\n    }\n    const status = error.response.status;\n    if (status === 401) {\n      throw new Error('Invalid username or password.');\n    } else if (status === 400) {\n      var _error$response$data;\n      throw new Error(((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Invalid login request.');\n    } else if (status === 500) {\n      throw new Error('Server error. Please try again later.');\n    }\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to login. Please try again.');\n  }\n};\nexport const logout = () => {\n  try {\n    localStorage.removeItem('token');\n  } catch (error) {\n    console.error('Error during logout:', error);\n  }\n};\nexport const register = async userData => {\n  try {\n    const cleanedUserData = {\n      ...userData,\n      username: userData.username.trim(),\n      email: userData.email.trim()\n    };\n    console.log('Sending registration request with data:', cleanedUserData);\n    const response = await api.post('/api/auth/register', cleanedUserData);\n    console.log('Registration response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response4, _error$response5, _error$response5$data;\n    console.error('Registration error details:', error.response || error);\n    if (!error.response) {\n      throw new Error('Unable to connect to the server. Please check if the backend is running.');\n    }\n    if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 409) {\n      throw new Error('Username or email already exists');\n    }\n    throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to register. Please try again.');\n  }\n};\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  return !!token;\n};","map":{"version":3,"names":["api","login","credentials","cleanedCredentials","username","trim","console","log","response","post","token","id","email","roles","data","Error","localStorage","setItem","error","_error$response","_error$response2","_error$response3","_error$response3$data","status","_error$response$data","message","logout","removeItem","register","userData","cleanedUserData","_error$response4","_error$response5","_error$response5$data","isAuthenticated","getItem"],"sources":["C:/Users/Aditi/Desktop/travel-frontend/src/services/authService.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const login = async (credentials) => {\r\n  try {\r\n    const cleanedCredentials = {\r\n      ...credentials,\r\n      username: credentials.username.trim()\r\n    };\r\n\r\n    console.log('Attempting login with credentials:', { username: cleanedCredentials.username });\r\n\r\n    const response = await api.post('/api/auth/login', cleanedCredentials);\r\n    const { token, id, username, email, roles = [] } = response.data;\r\n\r\n    if (!token) {\r\n      throw new Error('No authentication token received');\r\n    }\r\n\r\n    localStorage.setItem('token', token); // ✅ Store raw token only\r\n\r\n    return {\r\n      token,\r\n      id,\r\n      username,\r\n      email,\r\n      roles\r\n    };\r\n  } catch (error) {\r\n    console.error('Login error details:', {\r\n      error,\r\n      response: error.response,\r\n      data: error.response?.data,\r\n      status: error.response?.status\r\n    });\r\n\r\n    if (!error.response) {\r\n      throw new Error('Unable to connect to the server. Please check if the backend is running.');\r\n    }\r\n\r\n    const status = error.response.status;\r\n\r\n    if (status === 401) {\r\n      throw new Error('Invalid username or password.');\r\n    } else if (status === 400) {\r\n      throw new Error(error.response.data?.message || 'Invalid login request.');\r\n    } else if (status === 500) {\r\n      throw new Error('Server error. Please try again later.');\r\n    }\r\n\r\n    throw new Error(error.response?.data?.message || 'Failed to login. Please try again.');\r\n  }\r\n};\r\n\r\nexport const logout = () => {\r\n  try {\r\n    localStorage.removeItem('token');\r\n  } catch (error) {\r\n    console.error('Error during logout:', error);\r\n  }\r\n};\r\n\r\nexport const register = async (userData) => {\r\n  try {\r\n    const cleanedUserData = {\r\n      ...userData,\r\n      username: userData.username.trim(),\r\n      email: userData.email.trim()\r\n    };\r\n\r\n    console.log('Sending registration request with data:', cleanedUserData);\r\n\r\n    const response = await api.post('/api/auth/register', cleanedUserData);\r\n    console.log('Registration response:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Registration error details:', error.response || error);\r\n\r\n    if (!error.response) {\r\n      throw new Error('Unable to connect to the server. Please check if the backend is running.');\r\n    }\r\n\r\n    if (error.response?.status === 409) {\r\n      throw new Error('Username or email already exists');\r\n    }\r\n\r\n    throw new Error(error.response?.data?.message || 'Failed to register. Please try again.');\r\n  }\r\n};\r\n\r\nexport const isAuthenticated = () => {\r\n  const token = localStorage.getItem('token');\r\n  return !!token;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}