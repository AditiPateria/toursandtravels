{"ast":null,"code":"import api from './api';\nexport const login = async credentials => {\n  try {\n    // Trim the username to remove any whitespace\n    const cleanedCredentials = {\n      ...credentials,\n      username: credentials.username.trim()\n    };\n    console.log('Attempting login with credentials:', {\n      username: cleanedCredentials.username\n    });\n    const response = await api.post('/api/auth/login', cleanedCredentials);\n    console.log('Login response:', response.data);\n    const {\n      token,\n      id,\n      username,\n      email,\n      roles\n    } = response.data;\n\n    // Store the token\n    localStorage.setItem('token', token);\n\n    // Return the user data\n    return {\n      token,\n      id,\n      username,\n      email,\n      roles\n    };\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('Login error details:', error.response || error);\n    if (!error.response) {\n      throw new Error('Unable to connect to the server. Please check if the backend is running.');\n    }\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Invalid username or password.');\n  }\n};\nexport const logout = () => {\n  try {\n    localStorage.removeItem('token');\n  } catch (error) {\n    console.error('Error during logout:', error);\n  }\n};\nexport const register = async userData => {\n  try {\n    // Trim the username and email before sending\n    const cleanedUserData = {\n      ...userData,\n      username: userData.username.trim(),\n      email: userData.email.trim()\n    };\n    console.log('Sending registration request with data:', cleanedUserData);\n    const response = await api.post('/api/auth/register', cleanedUserData);\n    console.log('Registration response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response3, _error$response3$data;\n    console.error('Registration error details:', error.response || error);\n    if (!error.response) {\n      throw new Error('Unable to connect to the server. Please check if the backend is running.');\n    }\n    if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 409) {\n      throw new Error('Username or email already exists');\n    }\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to register. Please try again.');\n  }\n};\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  return !!token;\n};","map":{"version":3,"names":["api","login","credentials","cleanedCredentials","username","trim","console","log","response","post","data","token","id","email","roles","localStorage","setItem","error","_error$response","_error$response$data","Error","message","logout","removeItem","register","userData","cleanedUserData","_error$response2","_error$response3","_error$response3$data","status","isAuthenticated","getItem"],"sources":["C:/Users/Aditi/Desktop/travel-frontend/src/services/authService.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const login = async (credentials) => {\r\n  try {\r\n    // Trim the username to remove any whitespace\r\n    const cleanedCredentials = {\r\n      ...credentials,\r\n      username: credentials.username.trim()\r\n    };\r\n    \r\n    console.log('Attempting login with credentials:', { username: cleanedCredentials.username });\r\n    const response = await api.post('/api/auth/login', cleanedCredentials);\r\n    console.log('Login response:', response.data);\r\n    \r\n    const { token, id, username, email, roles } = response.data;\r\n    \r\n    // Store the token\r\n    localStorage.setItem('token', token);\r\n    \r\n    // Return the user data\r\n    return {\r\n      token,\r\n      id,\r\n      username,\r\n      email,\r\n      roles\r\n    };\r\n  } catch (error) {\r\n    console.error('Login error details:', error.response || error);\r\n    if (!error.response) {\r\n      throw new Error('Unable to connect to the server. Please check if the backend is running.');\r\n    }\r\n    throw new Error(error.response?.data?.message || 'Invalid username or password.');\r\n  }\r\n};\r\n\r\nexport const logout = () => {\r\n  try {\r\n    localStorage.removeItem('token');\r\n  } catch (error) {\r\n    console.error('Error during logout:', error);\r\n  }\r\n};\r\n\r\nexport const register = async (userData) => {\r\n  try {\r\n    // Trim the username and email before sending\r\n    const cleanedUserData = {\r\n      ...userData,\r\n      username: userData.username.trim(),\r\n      email: userData.email.trim()\r\n    };\r\n    \r\n    console.log('Sending registration request with data:', cleanedUserData);\r\n    const response = await api.post('/api/auth/register', cleanedUserData);\r\n    console.log('Registration response:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Registration error details:', error.response || error);\r\n    if (!error.response) {\r\n      throw new Error('Unable to connect to the server. Please check if the backend is running.');\r\n    }\r\n    if (error.response?.status === 409) {\r\n      throw new Error('Username or email already exists');\r\n    }\r\n    throw new Error(error.response?.data?.message || 'Failed to register. Please try again.');\r\n  }\r\n};\r\n\r\nexport const isAuthenticated = () => {\r\n  const token = localStorage.getItem('token');\r\n  return !!token;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}