{"ast":null,"code":"import api from'./api';export const login=async credentials=>{try{const response=await api.post('/api/auth/login',credentials);return response.data;}catch(error){throw new Error(error.message||'Failed to login. Please try again.');}};export const logout=()=>{try{localStorage.removeItem('token');}catch(error){console.error('Error during logout:',error);}};export const register=async userData=>{try{console.log('Sending registration request with data:',userData);const response=await api.post('/api/auth/signup',userData);console.log('Registration response:',response.data);return response.data;}catch(error){var _error$response;console.error('Registration error:',error);if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===409){throw new Error('Username or email already exists');}throw new Error(error.message||'Failed to register. Please try again.');}};","map":{"version":3,"names":["api","login","credentials","response","post","data","error","Error","message","logout","localStorage","removeItem","console","register","userData","log","_error$response","status"],"sources":["C:/Users/Aditi/Desktop/travel-frontend/src/services/authService.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const login = async (credentials) => {\r\n  try {\r\n    const response = await api.post('/api/auth/login', credentials);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(error.message || 'Failed to login. Please try again.');\r\n  }\r\n};\r\n\r\nexport const logout = () => {\r\n  try {\r\n    localStorage.removeItem('token');\r\n  } catch (error) {\r\n    console.error('Error during logout:', error);\r\n  }\r\n};\r\n\r\nexport const register = async (userData) => {\r\n  try {\r\n    console.log('Sending registration request with data:', userData);\r\n    const response = await api.post('/api/auth/signup', userData);\r\n    console.log('Registration response:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Registration error:', error);\r\n    if (error.response?.status === 409) {\r\n      throw new Error('Username or email already exists');\r\n    }\r\n    throw new Error(error.message || 'Failed to register. Please try again.');\r\n  }\r\n};"],"mappings":"AAAA,MAAO,CAAAA,GAAG,KAAM,OAAO,CAEvB,MAAO,MAAM,CAAAC,KAAK,CAAG,KAAO,CAAAC,WAAW,EAAK,CAC1C,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACI,IAAI,CAAC,iBAAiB,CAAEF,WAAW,CAAC,CAC/D,MAAO,CAAAC,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAACD,KAAK,CAACE,OAAO,EAAI,oCAAoC,CAAC,CACxE,CACF,CAAC,CAED,MAAO,MAAM,CAAAC,MAAM,CAAGA,CAAA,GAAM,CAC1B,GAAI,CACFC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC,CAClC,CAAE,MAAOL,KAAK,CAAE,CACdM,OAAO,CAACN,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC9C,CACF,CAAC,CAED,MAAO,MAAM,CAAAO,QAAQ,CAAG,KAAO,CAAAC,QAAQ,EAAK,CAC1C,GAAI,CACFF,OAAO,CAACG,GAAG,CAAC,yCAAyC,CAAED,QAAQ,CAAC,CAChE,KAAM,CAAAX,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACI,IAAI,CAAC,kBAAkB,CAAEU,QAAQ,CAAC,CAC7DF,OAAO,CAACG,GAAG,CAAC,wBAAwB,CAAEZ,QAAQ,CAACE,IAAI,CAAC,CACpD,MAAO,CAAAF,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,KAAAU,eAAA,CACdJ,OAAO,CAACN,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAC3C,GAAI,EAAAU,eAAA,CAAAV,KAAK,CAACH,QAAQ,UAAAa,eAAA,iBAAdA,eAAA,CAAgBC,MAAM,IAAK,GAAG,CAAE,CAClC,KAAM,IAAI,CAAAV,KAAK,CAAC,kCAAkC,CAAC,CACrD,CACA,KAAM,IAAI,CAAAA,KAAK,CAACD,KAAK,CAACE,OAAO,EAAI,uCAAuC,CAAC,CAC3E,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}