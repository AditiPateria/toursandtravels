{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080'; // Base URL for Spring Boot backend\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Access-Control-Allow-Origin': 'http://localhost:3000'\n  },\n  withCredentials: true\n});\n\n// Add request interceptor to include JWT token\napi.interceptors.request.use(config => {\n  // Add CORS headers to every request\n  config.headers = {\n    ...config.headers,\n    'Access-Control-Allow-Origin': 'http://localhost:3000',\n    'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS',\n    'Access-Control-Allow-Credentials': true\n  };\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response) {\n    var _error$response$data;\n    // Extract the error message from the response\n    const errorMessage = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'An error occurred';\n    console.error('Error Response Data:', error.response.data);\n    console.error('Error Response Status:', error.response.status);\n    error.message = errorMessage;\n  } else if (error.request) {\n    console.error('Error Request:', error.request);\n    error.message = 'No response received from server. Please check if the server is running.';\n  } else {\n    console.error('Error Message:', error.message);\n  }\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","console","Promise","reject","response","_error$response$data","errorMessage","data","message","status","removeItem","window","location","href"],"sources":["C:/Users/Aditi/Desktop/travel-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8080'; // Base URL for Spring Boot backend\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Access-Control-Allow-Origin': 'http://localhost:3000'\n  },\n  withCredentials: true\n});\n\n// Add request interceptor to include JWT token\napi.interceptors.request.use(\n  (config) => {\n    // Add CORS headers to every request\n    config.headers = {\n      ...config.headers,\n      'Access-Control-Allow-Origin': 'http://localhost:3000',\n      'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS',\n      'Access-Control-Allow-Credentials': true\n    };\n\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    console.error('Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response) {\n      // Extract the error message from the response\n      const errorMessage = error.response.data?.message || 'An error occurred';\n      console.error('Error Response Data:', error.response.data);\n      console.error('Error Response Status:', error.response.status);\n      error.message = errorMessage;\n    } else if (error.request) {\n      console.error('Error Request:', error.request);\n      error.message = 'No response received from server. Please check if the server is running.';\n    } else {\n      console.error('Error Message:', error.message);\n    }\n\n    if (error.response && error.response.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,uBAAuB,CAAC,CAAC;;AAE9C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE,kBAAkB;IAC5B,6BAA6B,EAAE;EACjC,CAAC;EACDC,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACAA,MAAM,CAACL,OAAO,GAAG;IACf,GAAGK,MAAM,CAACL,OAAO;IACjB,6BAA6B,EAAE,uBAAuB;IACtD,8BAA8B,EAAE,mCAAmC;IACnE,kCAAkC,EAAE;EACtC,CAAC;EAED,MAAMM,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACL,OAAO,CAACS,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACTC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;EACtC,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAb,GAAG,CAACK,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC1BU,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAJ,KAAK,IAAK;EACT,IAAIA,KAAK,CAACI,QAAQ,EAAE;IAAA,IAAAC,oBAAA;IAClB;IACA,MAAMC,YAAY,GAAG,EAAAD,oBAAA,GAAAL,KAAK,CAACI,QAAQ,CAACG,IAAI,cAAAF,oBAAA,uBAAnBA,oBAAA,CAAqBG,OAAO,KAAI,mBAAmB;IACxEP,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACI,QAAQ,CAACG,IAAI,CAAC;IAC1DN,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACI,QAAQ,CAACK,MAAM,CAAC;IAC9DT,KAAK,CAACQ,OAAO,GAAGF,YAAY;EAC9B,CAAC,MAAM,IAAIN,KAAK,CAACP,OAAO,EAAE;IACxBQ,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACP,OAAO,CAAC;IAC9CO,KAAK,CAACQ,OAAO,GAAG,0EAA0E;EAC5F,CAAC,MAAM;IACLP,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACQ,OAAO,CAAC;EAChD;EAEA,IAAIR,KAAK,CAACI,QAAQ,IAAIJ,KAAK,CAACI,QAAQ,CAACK,MAAM,KAAK,GAAG,EAAE;IACnDZ,YAAY,CAACa,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOX,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeb,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}