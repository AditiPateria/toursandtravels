{"ast":null,"code":"import api from './api';\nexport const login = async credentials => {\n  try {\n    // Trim the username to remove any whitespace\n    const cleanedCredentials = {\n      ...credentials,\n      username: credentials.username.trim()\n    };\n    console.log('Attempting login with credentials:', {\n      username: cleanedCredentials.username\n    });\n    const response = await api.post('/api/auth/login', cleanedCredentials);\n    console.log('Login response:', response.data);\n\n    // Check if we have a valid response\n    if (!response.data || typeof response.data !== 'object') {\n      console.error('Invalid response format:', response.data);\n      throw new Error('Invalid response from server');\n    }\n\n    // Extract data with defaults\n    const {\n      token,\n      type = 'Bearer',\n      id,\n      username,\n      email,\n      roles = []\n    } = response.data;\n\n    // Validate required fields\n    if (!token) {\n      console.error('No token in response:', response.data);\n      throw new Error('No authentication token received');\n    }\n\n    // Store the complete token with type\n    const fullToken = `${type} ${token}`;\n    localStorage.setItem('token', fullToken);\n\n    // Return the user data\n    return {\n      token: fullToken,\n      id,\n      username,\n      email,\n      roles\n    };\n  } catch (error) {\n    var _error$response, _error$response2, _error$response3, _error$response3$data;\n    console.error('Login error details:', {\n      error: error,\n      response: error.response,\n      data: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data,\n      status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status\n    });\n    if (!error.response) {\n      print(\"error.response\");\n      throw new Error('Unable to connect to the server. Please check if the backend is running.');\n    }\n\n    // Handle specific error cases\n    if (error.response.status === 401) {\n      throw new Error('Invalid username or password.');\n    } else if (error.response.status === 400) {\n      var _error$response$data;\n      throw new Error(((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Invalid login request.');\n    } else if (error.response.status === 500) {\n      throw new Error('Server error. Please try again later.');\n    }\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to login. Please try again.');\n  }\n};\nexport const logout = () => {\n  try {\n    localStorage.removeItem('token');\n  } catch (error) {\n    console.error('Error during logout:', error);\n  }\n};\nexport const register = async userData => {\n  try {\n    // Trim the username and email before sending\n    const cleanedUserData = {\n      ...userData,\n      username: userData.username.trim(),\n      email: userData.email.trim()\n    };\n    console.log('Sending registration request with data:', cleanedUserData);\n    const response = await api.post('/api/auth/register', cleanedUserData);\n    console.log('Registration response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response4, _error$response5, _error$response5$data;\n    console.error('Registration error details:', error.response || error);\n    if (!error.response) {\n      throw new Error('Unable to connect to the server. Please check if the backend is running.');\n    }\n    if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 409) {\n      throw new Error('Username or email already exists');\n    }\n    throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to register. Please try again.');\n  }\n};\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  return !!token;\n};","map":{"version":3,"names":["api","login","credentials","cleanedCredentials","username","trim","console","log","response","post","data","error","Error","token","type","id","email","roles","fullToken","localStorage","setItem","_error$response","_error$response2","_error$response3","_error$response3$data","status","print","_error$response$data","message","logout","removeItem","register","userData","cleanedUserData","_error$response4","_error$response5","_error$response5$data","isAuthenticated","getItem"],"sources":["C:/Users/Aditi/Desktop/travel-frontend/src/services/authService.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const login = async (credentials) => {\r\n  try {\r\n    // Trim the username to remove any whitespace\r\n    const cleanedCredentials = {\r\n      ...credentials,\r\n      username: credentials.username.trim()\r\n    };\r\n    \r\n    console.log('Attempting login with credentials:', { username: cleanedCredentials.username });\r\n    const response = await api.post('/api/auth/login', cleanedCredentials);\r\n    console.log('Login response:', response.data);\r\n    \r\n    // Check if we have a valid response\r\n    if (!response.data || typeof response.data !== 'object') {\r\n      console.error('Invalid response format:', response.data);\r\n      throw new Error('Invalid response from server');\r\n    }\r\n\r\n    // Extract data with defaults\r\n    const { \r\n      token, \r\n      type = 'Bearer',\r\n      id,\r\n      username,\r\n      email,\r\n      roles = []\r\n    } = response.data;\r\n\r\n    // Validate required fields\r\n    if (!token) {\r\n      console.error('No token in response:', response.data);\r\n      throw new Error('No authentication token received');\r\n    }\r\n\r\n    // Store the complete token with type\r\n    const fullToken = `${type} ${token}`;\r\n    localStorage.setItem('token', fullToken);\r\n    \r\n    // Return the user data\r\n    return {\r\n      token: fullToken,\r\n      id,\r\n      username,\r\n      email,\r\n      roles\r\n    };\r\n  } catch (error) {\r\n    console.error('Login error details:', {\r\n      error: error,\r\n      response: error.response,\r\n      data: error.response?.data,\r\n      status: error.response?.status\r\n    });\r\n    \r\n    if (!error.response) {\r\n      print(\"error.response\")\r\n      throw new Error('Unable to connect to the server. Please check if the backend is running.');\r\n    }\r\n\r\n    // Handle specific error cases\r\n    if (error.response.status === 401) {\r\n      throw new Error('Invalid username or password.');\r\n    } else if (error.response.status === 400) {\r\n      throw new Error(error.response.data?.message || 'Invalid login request.');\r\n    } else if (error.response.status === 500) {\r\n      throw new Error('Server error. Please try again later.');\r\n    }\r\n\r\n    throw new Error(error.response?.data?.message || 'Failed to login. Please try again.');\r\n  }\r\n};\r\n\r\nexport const logout = () => {\r\n  try {\r\n    localStorage.removeItem('token');\r\n  } catch (error) {\r\n    console.error('Error during logout:', error);\r\n  }\r\n};\r\n\r\nexport const register = async (userData) => {\r\n  try {\r\n    // Trim the username and email before sending\r\n    const cleanedUserData = {\r\n      ...userData,\r\n      username: userData.username.trim(),\r\n      email: userData.email.trim()\r\n    };\r\n    \r\n    console.log('Sending registration request with data:', cleanedUserData);\r\n    const response = await api.post('/api/auth/register', cleanedUserData);\r\n    console.log('Registration response:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Registration error details:', error.response || error);\r\n    if (!error.response) {\r\n      throw new Error('Unable to connect to the server. Please check if the backend is running.');\r\n    }\r\n    if (error.response?.status === 409) {\r\n      throw new Error('Username or email already exists');\r\n    }\r\n    throw new Error(error.response?.data?.message || 'Failed to register. Please try again.');\r\n  }\r\n};\r\n\r\nexport const isAuthenticated = () => {\r\n  const token = localStorage.getItem('token');\r\n  return !!token;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}