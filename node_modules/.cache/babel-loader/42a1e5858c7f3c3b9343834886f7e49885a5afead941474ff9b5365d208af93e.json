{"ast":null,"code":"import api from './api';\nexport const login = async credentials => {\n  try {\n    const response = await api.post('/api/auth/login', credentials);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.message || 'Failed to login. Please try again.');\n  }\n};\nexport const logout = () => {\n  try {\n    localStorage.removeItem('token');\n  } catch (error) {\n    console.error('Error during logout:', error);\n  }\n};\nexport const register = async userData => {\n  try {\n    console.log('Sending registration request with data:', userData);\n    const response = await api.post('/api/auth/signup', userData);\n    console.log('Registration response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error('Registration error:', error);\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 409) {\n      throw new Error('Username or email already exists');\n    }\n    throw new Error(error.message || 'Failed to register. Please try again.');\n  }\n};","map":{"version":3,"names":["api","login","credentials","response","post","data","error","Error","message","logout","localStorage","removeItem","console","register","userData","log","_error$response","status"],"sources":["C:/Users/Aditi/Desktop/travel-frontend/src/services/authService.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const login = async (credentials) => {\r\n  try {\r\n    const response = await api.post('/api/auth/login', credentials);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(error.message || 'Failed to login. Please try again.');\r\n  }\r\n};\r\n\r\nexport const logout = () => {\r\n  try {\r\n    localStorage.removeItem('token');\r\n  } catch (error) {\r\n    console.error('Error during logout:', error);\r\n  }\r\n};\r\n\r\nexport const register = async (userData) => {\r\n  try {\r\n    console.log('Sending registration request with data:', userData);\r\n    const response = await api.post('/api/auth/signup', userData);\r\n    console.log('Registration response:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Registration error:', error);\r\n    if (error.response?.status === 409) {\r\n      throw new Error('Username or email already exists');\r\n    }\r\n    throw new Error(error.message || 'Failed to register. Please try again.');\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,OAAO,MAAMC,KAAK,GAAG,MAAOC,WAAW,IAAK;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,iBAAiB,EAAEF,WAAW,CAAC;IAC/D,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAACD,KAAK,CAACE,OAAO,IAAI,oCAAoC,CAAC;EACxE;AACF,CAAC;AAED,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAC1B,IAAI;IACFC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdM,OAAO,CAACN,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;EAC9C;AACF,CAAC;AAED,OAAO,MAAMO,QAAQ,GAAG,MAAOC,QAAQ,IAAK;EAC1C,IAAI;IACFF,OAAO,CAACG,GAAG,CAAC,yCAAyC,EAAED,QAAQ,CAAC;IAChE,MAAMX,QAAQ,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,kBAAkB,EAAEU,QAAQ,CAAC;IAC7DF,OAAO,CAACG,GAAG,CAAC,wBAAwB,EAAEZ,QAAQ,CAACE,IAAI,CAAC;IACpD,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAU,eAAA;IACdJ,OAAO,CAACN,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,IAAI,EAAAU,eAAA,GAAAV,KAAK,CAACH,QAAQ,cAAAa,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;MAClC,MAAM,IAAIV,KAAK,CAAC,kCAAkC,CAAC;IACrD;IACA,MAAM,IAAIA,KAAK,CAACD,KAAK,CAACE,OAAO,IAAI,uCAAuC,CAAC;EAC3E;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}