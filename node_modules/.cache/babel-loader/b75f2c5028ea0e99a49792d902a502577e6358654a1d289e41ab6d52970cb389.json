{"ast":null,"code":"import api from './api';\nexport const getBookings = async () => {\n  try {\n    const response = await api.get('/api/bookings/my-bookings');\n    // If successful but no bookings, return empty array\n    return response.data || [];\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('Error fetching bookings:', error);\n    // Check if it's a connection error\n    if (!error.response) {\n      throw new Error('No response from server. Please check if the backend server is running.');\n    }\n    // If we got a response but it's an error\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch bookings. Please try again later.');\n  }\n};\nexport const createBooking = async bookingData => {\n  try {\n    // Validate required fields\n    if (!bookingData.tourId) {\n      throw new Error('Tour ID is required');\n    }\n    if (!bookingData.bookingDate) {\n      throw new Error('Booking date is required');\n    }\n    if (!bookingData.travelersCount || bookingData.travelersCount < 1) {\n      throw new Error('Number of travelers must be at least 1');\n    }\n    const response = await api.post('/api/bookings', {\n      tourId: parseInt(bookingData.tourId),\n      bookingDate: bookingData.bookingDate,\n      numberOfPeople: parseInt(bookingData.travelersCount),\n      specialRequirements: bookingData.specialRequirements || ''\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    console.error('Error creating booking:', error);\n    // Check if it's a connection error\n    if (!error.response) {\n      throw new Error('Unable to connect to the server. Please check if the backend server is running.');\n    }\n    // If we got a response but it's an error\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to create booking. Please try again.');\n  }\n};\nexport const cancelBooking = async bookingId => {\n  try {\n    const response = await api.delete(`/api/bookings/${bookingId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    console.error('Error canceling booking:', error);\n    // Check if it's a connection error\n    if (!error.response) {\n      throw new Error('Unable to connect to the server. Please check if the backend server is running.');\n    }\n    // If we got a response but it's an error\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to cancel booking. Please try again.');\n  }\n};","map":{"version":3,"names":["api","getBookings","response","get","data","error","_error$response","_error$response$data","console","Error","message","createBooking","bookingData","tourId","bookingDate","travelersCount","post","parseInt","numberOfPeople","specialRequirements","_error$response2","_error$response2$data","cancelBooking","bookingId","delete","_error$response3","_error$response3$data"],"sources":["C:/Users/Aditi/Desktop/travel-frontend/src/services/bookingService.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const getBookings = async () => {\r\n  try {\r\n    const response = await api.get('/api/bookings/my-bookings');\r\n    // If successful but no bookings, return empty array\r\n    return response.data || [];\r\n  } catch (error) {\r\n    console.error('Error fetching bookings:', error);\r\n    // Check if it's a connection error\r\n    if (!error.response) {\r\n      throw new Error('No response from server. Please check if the backend server is running.');\r\n    }\r\n    // If we got a response but it's an error\r\n    throw new Error(error.response?.data?.message || 'Failed to fetch bookings. Please try again later.');\r\n  }\r\n};\r\n\r\nexport const createBooking = async (bookingData) => {\r\n  try {\r\n    // Validate required fields\r\n    if (!bookingData.tourId) {\r\n      throw new Error('Tour ID is required');\r\n    }\r\n    if (!bookingData.bookingDate) {\r\n      throw new Error('Booking date is required');\r\n    }\r\n    if (!bookingData.travelersCount || bookingData.travelersCount < 1) {\r\n      throw new Error('Number of travelers must be at least 1');\r\n    }\r\n\r\n    const response = await api.post('/api/bookings', {\r\n      tourId: parseInt(bookingData.tourId),\r\n      bookingDate: bookingData.bookingDate,\r\n      numberOfPeople: parseInt(bookingData.travelersCount),\r\n      specialRequirements: bookingData.specialRequirements || ''\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating booking:', error);\r\n    // Check if it's a connection error\r\n    if (!error.response) {\r\n      throw new Error('Unable to connect to the server. Please check if the backend server is running.');\r\n    }\r\n    // If we got a response but it's an error\r\n    throw new Error(error.response?.data?.message || 'Failed to create booking. Please try again.');\r\n  }\r\n};\r\n\r\nexport const cancelBooking = async (bookingId) => {\r\n  try {\r\n    const response = await api.delete(`/api/bookings/${bookingId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error canceling booking:', error);\r\n    // Check if it's a connection error\r\n    if (!error.response) {\r\n      throw new Error('Unable to connect to the server. Please check if the backend server is running.');\r\n    }\r\n    // If we got a response but it's an error\r\n    throw new Error(error.response?.data?.message || 'Failed to cancel booking. Please try again.');\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}