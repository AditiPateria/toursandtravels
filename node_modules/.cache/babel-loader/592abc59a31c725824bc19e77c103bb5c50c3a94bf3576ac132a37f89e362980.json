{"ast":null,"code":"import api from './api';\nexport const login = async credentials => {\n  try {\n    const response = await api.post('/api/auth/login', credentials);\n    const {\n      token,\n      type,\n      id,\n      username,\n      email,\n      roles\n    } = response.data;\n\n    // Store the complete token with Bearer prefix\n    const fullToken = `${type} ${token}`;\n    localStorage.setItem('token', fullToken);\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('Login error:', error);\n    if (!error.response) {\n      throw new Error('Unable to connect to the server. Please check if the backend is running.');\n    }\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to login. Please try again.');\n  }\n};\nexport const logout = () => {\n  try {\n    localStorage.removeItem('token');\n  } catch (error) {\n    console.error('Error during logout:', error);\n  }\n};\nexport const register = async userData => {\n  try {\n    console.log('Sending registration request with data:', userData);\n    const response = await api.post('/api/auth/signup', userData);\n    console.log('Registration response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response3, _error$response3$data;\n    console.error('Registration error:', error);\n    if (!error.response) {\n      throw new Error('Unable to connect to the server. Please check if the backend is running.');\n    }\n    if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 409) {\n      throw new Error('Username or email already exists');\n    }\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to register. Please try again.');\n  }\n};\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  return !!token;\n};","map":{"version":3,"names":["api","login","credentials","response","post","token","type","id","username","email","roles","data","fullToken","localStorage","setItem","error","_error$response","_error$response$data","console","Error","message","logout","removeItem","register","userData","log","_error$response2","_error$response3","_error$response3$data","status","isAuthenticated","getItem"],"sources":["C:/Users/Aditi/Desktop/travel-frontend/src/services/authService.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const login = async (credentials) => {\r\n  try {\r\n    const response = await api.post('/api/auth/login', credentials);\r\n    const { token, type, id, username, email, roles } = response.data;\r\n    \r\n    // Store the complete token with Bearer prefix\r\n    const fullToken = `${type} ${token}`;\r\n    localStorage.setItem('token', fullToken);\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    if (!error.response) {\r\n      throw new Error('Unable to connect to the server. Please check if the backend is running.');\r\n    }\r\n    throw new Error(error.response?.data?.message || 'Failed to login. Please try again.');\r\n  }\r\n};\r\n\r\nexport const logout = () => {\r\n  try {\r\n    localStorage.removeItem('token');\r\n  } catch (error) {\r\n    console.error('Error during logout:', error);\r\n  }\r\n};\r\n\r\nexport const register = async (userData) => {\r\n  try {\r\n    console.log('Sending registration request with data:', userData);\r\n    const response = await api.post('/api/auth/signup', userData);\r\n    console.log('Registration response:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Registration error:', error);\r\n    if (!error.response) {\r\n      throw new Error('Unable to connect to the server. Please check if the backend is running.');\r\n    }\r\n    if (error.response?.status === 409) {\r\n      throw new Error('Username or email already exists');\r\n    }\r\n    throw new Error(error.response?.data?.message || 'Failed to register. Please try again.');\r\n  }\r\n};\r\n\r\nexport const isAuthenticated = () => {\r\n  const token = localStorage.getItem('token');\r\n  return !!token;\r\n};"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,OAAO,MAAMC,KAAK,GAAG,MAAOC,WAAW,IAAK;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,iBAAiB,EAAEF,WAAW,CAAC;IAC/D,MAAM;MAAEG,KAAK;MAAEC,IAAI;MAAEC,EAAE;MAAEC,QAAQ;MAAEC,KAAK;MAAEC;IAAM,CAAC,GAAGP,QAAQ,CAACQ,IAAI;;IAEjE;IACA,MAAMC,SAAS,GAAG,GAAGN,IAAI,IAAID,KAAK,EAAE;IACpCQ,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,SAAS,CAAC;IAExC,OAAOT,QAAQ,CAACQ,IAAI;EACtB,CAAC,CAAC,OAAOI,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACdC,OAAO,CAACH,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,IAAI,CAACA,KAAK,CAACZ,QAAQ,EAAE;MACnB,MAAM,IAAIgB,KAAK,CAAC,0EAA0E,CAAC;IAC7F;IACA,MAAM,IAAIA,KAAK,CAAC,EAAAH,eAAA,GAAAD,KAAK,CAACZ,QAAQ,cAAAa,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBL,IAAI,cAAAM,oBAAA,uBAApBA,oBAAA,CAAsBG,OAAO,KAAI,oCAAoC,CAAC;EACxF;AACF,CAAC;AAED,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAC1B,IAAI;IACFR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdG,OAAO,CAACH,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;EAC9C;AACF,CAAC;AAED,OAAO,MAAMQ,QAAQ,GAAG,MAAOC,QAAQ,IAAK;EAC1C,IAAI;IACFN,OAAO,CAACO,GAAG,CAAC,yCAAyC,EAAED,QAAQ,CAAC;IAChE,MAAMrB,QAAQ,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,kBAAkB,EAAEoB,QAAQ,CAAC;IAC7DN,OAAO,CAACO,GAAG,CAAC,wBAAwB,EAAEtB,QAAQ,CAACQ,IAAI,CAAC;IACpD,OAAOR,QAAQ,CAACQ,IAAI;EACtB,CAAC,CAAC,OAAOI,KAAK,EAAE;IAAA,IAAAW,gBAAA,EAAAC,gBAAA,EAAAC,qBAAA;IACdV,OAAO,CAACH,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,IAAI,CAACA,KAAK,CAACZ,QAAQ,EAAE;MACnB,MAAM,IAAIgB,KAAK,CAAC,0EAA0E,CAAC;IAC7F;IACA,IAAI,EAAAO,gBAAA,GAAAX,KAAK,CAACZ,QAAQ,cAAAuB,gBAAA,uBAAdA,gBAAA,CAAgBG,MAAM,MAAK,GAAG,EAAE;MAClC,MAAM,IAAIV,KAAK,CAAC,kCAAkC,CAAC;IACrD;IACA,MAAM,IAAIA,KAAK,CAAC,EAAAQ,gBAAA,GAAAZ,KAAK,CAACZ,QAAQ,cAAAwB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBhB,IAAI,cAAAiB,qBAAA,uBAApBA,qBAAA,CAAsBR,OAAO,KAAI,uCAAuC,CAAC;EAC3F;AACF,CAAC;AAED,OAAO,MAAMU,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMzB,KAAK,GAAGQ,YAAY,CAACkB,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAO,CAAC,CAAC1B,KAAK;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}